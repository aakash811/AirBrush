<!DOCTYPE html>
<html lang="en">


<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" type="image/x-icon" href="/images/airbrush-fav-1.png">
    <title>{{pageTitle}} [100% Free, No Login Required]</title>
		<meta name="description" content="{{metaDescription}}">
		<meta name="robots" content="index, follow">
		
		<!-- FB meta tags -->
		<meta property="og:title" content="{{pageTitle}} [100% Free, No Login Required]">
		<meta property="og:description" content="{{metaDescription}}">
		<meta property="og:image" content="https://i.postimg.cc/0NfzStnt/AI4Chat.png">
		<meta property="og:url" content="https://www.ai4chat.co/pages/{{url}}">
		
		<!-- Twitter meta tags -->
		<meta name="twitter:title" content="{{pageTitle}} [100% Free, No Login Required]">
		<meta name="twitter:description" content="{{metaDescription}}">
		<meta name="twitter:image" content="https://i.postimg.cc/0NfzStnt/AI4Chat.png">



    <!-- bootstrap min css -->
    <link rel="stylesheet preload" href="/css/plugins/fontawesome-6.css" as="style">
    <link rel="stylesheet preload" href="/css/plugins/unicons.css" as="style">
    <link rel="stylesheet preload" href="/css/plugins/swiper.min.css" as="style">
    <link rel="stylesheet preload" href="/css/vendor/metismenu.css" as="style">
    <link rel="stylesheet preload" href="/css/vendor/bootstrap.min.css" as="style">
    <!-- custom css style -->
    <link rel="stylesheet preload" href="/css/style.css" as="style">
</head>

<body class="dark-version">

    {{> desktop-menu}}

<!-- rts breadcrumb area start-->
    <div class="rts-bread-crumb-area bg_image">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb-inne">
                        <div class="title-area">
                            <h1 class="bread-title">{{pageTitle}}</h1>
                            <div class="inner-wrapper">
                                <a href="https://www.ai4chat.co">Home</a>/<a href="use-cases">Use Cases</a>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- rts breadcrumb area end -->
<style>
.flex-app {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 20px;
  margin-bottom: 20px;
}

.app-btn {
  width: 45%;
  max-width: 220px;
  color: #fff;
  margin: 20px 10px;
  text-align: left;
  border-radius: 5px;
  text-decoration: none;
  font-family: "Lucida Grande", sans-serif;
  font-size: 15px;
  text-transform: uppercase;
  border: 1px #3996fb solid;
  padding: 10px 10px;
}

.app-btn.blu {
  background-color: #101010;
  transition: background-color 0.25s linear;
}

.app-btn.blu:hover {
  background-color: #454545;
}

.app-btn i {
  width: 20%;
  text-align: center;
  font-size: 36px;
  margin-right: 7px;
}

.app-btn .big-txt {
  font-size: 25px;
  text-transform: capitalize;
}

/* Media query for screens below 768 pixels */
@media screen and (max-width: 768px) {
  .flex-app {
    flex-direction: column; /* Stack children vertically */
  }

  .app-btn {
    width: 90%; /* Adjust the button width to take more space */
    margin: 7px auto; /* Center the buttons horizontally */
  }
  
  .app-btn i {
    margin-bottom: 7px; /* Add space below the icon */
  }
  
  .app-btn span {
    margin-top: 7px; /* Add space above the text */
  }
}


</style>

		<!-- rts case details bottom area start -->
    <div class="rts-case-details-bottom-area rts-section-gap plr_sm--15">
        <div class="container-use-case-d">
            <div class="row">
                <div class="col-lg-12">
                    <div class="case-details-title-area-d">
                        
												
												
												
												
												
												<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<style>

.chat-container {
    display: flex;
    flex-direction: column;
    height: 90vh;
    max-width: 100%;
    margin: auto;
    margin-bottom: 50px;
    border: 1px solid #3996fb;
    border-radius: 8px;
    padding: 10px;
    background: #1F1F25; /* Dark theme for chat */
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.chat-box {
    height: 100%;
    overflow-y: auto;
    margin-bottom: 10px;
    padding: 5px;
}

.chat-message {
    margin: 5px;
    padding: 10px;
    border-radius: 10px;
    color: #FFF;
    width: fit-content;
    max-width: 80%;
    position: relative; /* Needed for positioning of copy button */
}

.user-message {
    background-color: #3996fb;
    align-self: flex-end;
}

.bot-message {
    background-color: #333;
    align-self: flex-start;
}

.conversation-starters {
    display: flex;
    flex-direction: column; /* Organize in a column */
    background-color: rgba(0, 0, 0, 0.3);
    padding: 10px;
    box-sizing: border-box;
    margin-bottom: 10px; /* Space between starters and input area */
}

.starter {
    padding: 10px;
    border-radius: 5px;
    background-color: #3996fb;
    color: white;
    cursor: pointer;
    text-align: center;
    margin-bottom: 5px; /* Separate the starters */
}

.starter:hover {
    background-color: #1F1F25;
}

.starter:last-child {
    margin-bottom: 0; /* Remove margin for the last starter */
}

.input-area {
    display: flex;
    flex-direction: column; /* Stack elements on small screens */
}

textarea, select {
    flex-grow: 1;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #3996fb;
    margin-bottom: 5px; /* Space between input and button on small screens */
    resize: none; /* Disable resizing of textarea */
}

button {
    padding: 10px 20px;
    border: none;
    background-color: #3996fb;
    color: white;
    cursor: pointer;
    border-radius: 5px;
    margin-top: 2px;
}

button:hover {
    background-color: #1F1F25;
}

.copy-button {
    background: transparent;
    border: none;
    color: white;
    cursor: pointer;
    display: block; /* Button is always visible and not just on hover */
    font-size: 14px;
}

.typing-indicator {
    height: 3px;
    width: 0;
    background-color: #3996fb;
    border-radius: 2px;
    animation: typing 2s infinite;
    display: none; /* Start hidden */
}

@keyframes typing {
    0% { width: 0; }
    50% { width: 100%; }
    100% { width: 0; }
}

@media screen and (max-width: 768px) {
    .input-area {
        flex-direction: column; /* Ensure input and button are stacked */
    }
    button {
        width: 100%; /* Full width button */
    }
    .chat-container {
    height: 200vh;
}

}

</style>

<div class="chat-container">
    <select id="languageDropdown" class="language-select">
        <option value="English">English</option>
    <option value="Afrikaans">Afrikaans</option>
    <option value="Albanian">Albanian</option>
    <option value="Amharic">Amharic</option>
    <option value="Arabic">Arabic</option>
    <option value="Armenian">Armenian</option>
    <option value="Azerbaijani">Azerbaijani</option>
    <option value="Bengali">Bengali</option>
    <option value="Bosnian">Bosnian</option>
    <option value="Bulgarian">Bulgarian</option>
    <option value="Chinese (Simplified)">Chinese (Simplified)</option>
    <option value="Catalan">Catalan</option>
    <option value="Chinese (Traditional)">Chinese (Traditional)</option>
    <option value="Croatian">Croatian</option>
    <option value="Czech">Czech</option>
    <option value="Danish">Danish</option>
    <option value="Dari">Dari</option>
    <option value="Dutch">Dutch</option>
    <option value="Estonian">Estonian</option>
    <option value="Finnish">Finnish</option>
    <option value="French">French</option>
    <option value="French Canadian">French Canadian</option>
    <option value="Georgian">Georgian</option>
    <option value="German">German</option>
    <option value="Greek">Greek</option>
    <option value="Gujarati">Gujarati</option>
    <option value="Haitian Creole">Haitian Creole</option>
    <option value="Hausa">Hausa</option>
    <option value="Hebrew">Hebrew</option>
    <option value="Hindi">Hindi</option>
    <option value="Hungarian">Hungarian</option>
    <option value="Icelandic">Icelandic</option>
    <option value="Indonesian">Indonesian</option>
    <option value="Italian">Italian</option>
    <option value="Japanese">Japanese</option>
    <option value="Kannada">Kannada</option>
    <option value="Kazakh">Kazakh</option>
    <option value="Korean">Korean</option>
    <option value="Latvian">Latvian</option>
    <option value="Lithuanian">Lithuanian</option>
    <option value="Macedonian">Macedonian</option>
    <option value="Malay">Malay</option>
    <option value="Malayalam">Malayalam</option>
    <option value="Maltese">Maltese</option>
    <option value="Mongolian">Mongolian</option>
    <option value="Norwegian">Norwegian</option>
    <option value="Farsi (Persian)">Farsi (Persian)</option>
    <option value="Pashto">Pashto</option>
    <option value="Polish">Polish</option>
    <option value="Portuguese">Portuguese</option>
    <option value="Romanian">Romanian</option>
    <option value="Russian">Russian</option>
    <option value="Serbian">Serbian</option>
    <option value="Sinhala">Sinhala</option>
    <option value="Slovak">Slovak</option>
    <option value="Slovenian">Slovenian</option>
    <option value="Somali">Somali</option>
    <option value="Spanish">Spanish</option>
    <option value="Spanish Mexican">Spanish Mexican</option>
    <option value="Swahili">Swahili</option>
    <option value="Swedish">Swedish</option>
    <option value="Filipino Tagalog">Filipino Tagalog</option>
    <option value="Tamil">Tamil</option>
    <option value="Telugu">Telugu</option>
    <option value="Thai">Thai</option>
    <option value="Turkish">Turkish</option>
    <option value="Ukrainian">Ukrainian</option>
    <option value="Urdu">Urdu</option>
    <option value="Uzbek">Uzbek</option>
    <option value="Vietnamese">Vietnamese</option>
    <option value="Welsh">Welsh</option>
    </select>
    <div class="chat-box" id="chatBox">
        <!-- Messages will be appended here -->
    </div>
    
    <div class="input-area">
	    <div class="conversation-starters" id="startersContainer">
	{{#each conversationStarters}}
	<div class="starter" onclick="selectStarter('{{this}}')">{{this}}</div>
	{{/each}}
        
    </div> 
        <textarea id="userInput" placeholder="Type a message..." rows="3"></textarea>
        <button onclick="sendMessage()">Send</button>
        <div class="typing-indicator" id="typingIndicator"></div>
    </div>
</div>

<script>
	let conversation = [];
    const initialMessage = `{{prompt}}`; // Define the first auto-sent message

    function getCookie(name) {
        let cookieArray = document.cookie.split('; ');
        let cookie = cookieArray.find(row => row.startsWith(name + '='));
        return cookie ? cookie.split('=')[1] : null;
    }

    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = `${name}=${value}; expires=${date.toUTCString()}; path=/`;
    }
    
    function selectStarter(message) {
        document.getElementById('startersContainer').style.display = 'none';
        document.getElementById('userInput').value = message;
        sendMessage();
    }

    function incrementMessageCount() {
        let count = getCookie('messageCount') || 0;
        count++;
        setCookie('messageCount', count, 1); // Expires in 1 day
        return count;
    }

    async function sendMessage() {
    // Check and increment the message count using cookies
    if (incrementMessageCount() > 10) {
        let baseURL = window.location.hostname;
        let pagePath = window.location.pathname.substring(1) || "homepage";
        let signupURL = updateAllLinks();
        const signupMessage = `You have exceeded your daily limit of 10 messages. To continue, simply sign up for a free account. Get access to chat history across all devices via our mobile apps, faster responses and higher memory limits. <a href='${signupURL}' style='color: #3996fb; text-decoration: underline;'>Click here to sign up</a>.`;
        displayMessage(signupMessage, 'bot');
        return;
    }

    const inputField = document.getElementById('userInput');
    const userText = inputField.value.trim();
    if (!userText) {
        alert('Please enter a message');
        return;
    }

    // Retrieve the selected language from the dropdown
    const languageDropdown = document.getElementById('languageDropdown');
    const selectedLanguage = languageDropdown.value;

    let messageToSend = userText;

    // Prepend language-specific text if the selected language is not English
    if (selectedLanguage !== "English") {
        messageToSend = `Generate a reply to the following message in ${selectedLanguage}: ${userText}`;
    }

    displayMessage(userText, 'user');  // Display the original message in the chat
    conversation.push({ role: 'user', content: messageToSend });

    // Show typing indicator
    const typingIndicator = document.getElementById('typingIndicator');
    typingIndicator.style.display = 'block';

    const requestOptions = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({messages: conversation})
    };

    try {
        const response = await fetch('/generate-response', requestOptions);
        const data = await response.json();
        typingIndicator.style.display = 'none';  // Hide typing indicator
        displayMessage(data.message, 'assistant');
        conversation.push({ role: 'assistant', content: data.message });
    } catch (error) {
        console.error('Error:', error);
        typingIndicator.style.display = 'none';  // Hide typing indicator
        displayMessage("There was an error processing your request. Please try again later.", 'bot');
    }

    inputField.value = '';
}



    function displayMessage(message, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = message; // Changed to innerHTML to allow HTML content
        messageDiv.classList.add('chat-message');

        if (sender === 'user') {
            messageDiv.classList.add('user-message');
            document.getElementById('startersContainer').style.display = 'none';
        } else {
            messageDiv.classList.add('bot-message');
        }

        const copyBtn = document.createElement('button');
        copyBtn.textContent = 'Copy';
        copyBtn.className = 'copy-button';
        copyBtn.onclick = function() {
            navigator.clipboard.writeText(message.replace(/<[^>]*>/g, "")); // Remove any HTML tags when copying
        };
        messageDiv.appendChild(copyBtn);

        const chatBox = document.getElementById('chatBox');
        chatBox.appendChild(messageDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }
    
    function updateAllLinks() {
    https://app.ai4chat.co/signup?ref=${pagePath}&query2=${initialMessage}
        var baseUrl = 'https://app.ai4chat.co/signup?ref=';
		    var path = window.location.pathname.split('/').filter(part => part).pop() || 'homepage';
		    var deviceType = window.innerWidth > 768 ? 'Desktop' : 'Mobile';
        
	        const query2 = encodeURIComponent(initialMessage);
			const language = document.getElementById("languageDropdown").value;
	        const signupURL = `https://app.ai4chat.co/signup?ref=${path}-${deviceType}&query2=${query2}&language=${language}`;
	
			// Assuming `elements` is an array containing the IDs of the elements you want to update
			var elements = ["bottomBarLink", "GetStartedTop", "GetStartedBottom", "GetStartedMobileMenu"]; // Replace with your actual element IDs
			// Array containing referral ID suffixes corresponding to each element
			var referralSuffixes = ["BottomBar", "Top", "Bottom", "MobileMenu"]; // Ensure this has the same number of entries as `elements`

			
			// Verify that both arrays have the same length to prevent mismatched indexes
			if (elements.length === referralSuffixes.length) {
			// Loop through each ID in the `elements` array
			    elements.forEach(function(id, index) {
			        var element = document.getElementById(id); // Get the element by its ID
			        if (element) {
			            element.href = `https://app.ai4chat.co/signup?ref=${path}-GetStarted-${deviceType}-${referralSuffixes[index]}&contentType=${contentType}&inputTextValue=${inputTextValue}&query=${query}&language=${language}&tone=${tone}&wordCount=${wordCount}`;
			        }
			    });
			} else {
			    console.error("Error: `elements` and `referralSuffixes` arrays do not have the same length.");
			}

		    return signupURL;
    }

    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the conversation with the bot's initial message
    conversation = [{ role: 'assistant', content: initialMessage }];
    displayMessage(initialMessage, 'bot');
});
</script>
                    
                </div>
            </div>
        </div>
    </div>
    <!-- rts case details bottom area end -->


    <!-- rts case details bottom area start -->
    <div class="rts-case-details-bottom-area rts-section-gap plr_sm--15">
        <div class="container-use-case-d">
            <div class="row">
                <div class="col-lg-12">
                    <div class="case-details-title-area-d">
                        
												{{{introduction}}} 
												<br>
												{{{mainFunctions}}} 
												<br>
												{{{idealUsers}}} 
												<br>
												{{{howToUse}}} 
												<br>
												{{{faq}}} 

                    </div>
                    
                </div>
            </div>
        </div>
    </div>
    <!-- rts case details bottom area end -->


    {{> faq}}
		
		{{> apps}}

    {{> cta}}


    {{> footer}}



    <div id="anywhere-home" class="">
    </div>

    

    {{> mobile-menu}}


    <!-- rts backto top start -->
    <div class="progress-wrap">
        <svg class="progress-circle svg-content" width="100%" height="100%" viewBox="-1 -1 102 102">
            <path d="M50,1 a49,49 0 0,1 0,98 a49,49 0 0,1 0,-98" style="transition: stroke-dashoffset 10ms linear 0s; stroke-dasharray: 307.919, 307.919; stroke-dashoffset: 307.919;"></path>
        </svg>
    </div>
    <!-- rts backto top end -->


    <script src="/js/vendor/jquery.min.js" defer></script>
    <script src="/js/vendor/metismenu.js" defer></script>
    <script src="/js/plugins/bootstrap.min.js" defer></script>
    <script src="/js/plugins/swiper.js" defer></script>
    <script src="/js/plugins/contact.form.js" defer></script>
    <script src="/js/main.js" defer></script>
    
    <!-- exit intent start -->

<style>
    /* Fullscreen overlay */
    #overlay-background {
        display: none;
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Translucent black */
        z-index: 1001; /* Below the popup */
    }

    /* Popup styles */
    #unique-exit-intent-popup {
        display: none;
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        background-color: #1F1F25;
        text-align: center;
        z-index: 1002;
        color: #f3f3f3;
        box-sizing: border-box; /* Include padding and border in the element's total width and height */
        border: 1px #3996fb solid;
    }

    /* Mobile devices */
    @media (max-width: 767px) {
        #unique-exit-intent-popup {
            width: calc(100% - 20px); /* Slightly increase width while maintaining margin */
            margin: 10px; /* Ensure there's some space around the popup */
        }
    }

    /* Desktops and larger screens */
    @media (min-width: 768px) {
        #unique-exit-intent-popup {
            width: 60%; /* Increase width to use more screen space */
            max-width: 800px; /* Set a reasonable maximum width */
        }
    }

    .exit-intent-button {
        width: 80%;
        padding: 10px;
        border: none;
        cursor: pointer;
    }
</style>

<div id="overlay-background"></div>
<div id="unique-exit-intent-popup">
    <h3 style="color: #3996fb;">Want some more features?</h3>
    <ul style="list-style: none; padding: 0;">
        <li>- History to store generated content</li>
        <li>- Access to mobile apps for content generation on the go</li>
        <li>- Access to 500+ other AI tools and templates</li>
    </ul>
    <button class="exit-intent-button" id="exit-intent-yes" style="background-color: #3996fb; color: white;">Sure, I want them</button>
    <button class="exit-intent-button" id="exit-intent-no" style="background-color: #dddddd; color: black;">Nah, I don't need it</button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var i = 0;
    var secondsCounter = 0;
    setInterval(incrementSeconds, 1000);

    function incrementSeconds() {
        secondsCounter += 1;
    }

    function triggerExitIntent() {
        if (i < 1 && secondsCounter >= 30) { // Ensure user has spent at least 30 seconds on the page
            document.getElementById("unique-exit-intent-popup").style.display = 'block';
            document.getElementById("overlay-background").style.display = 'block';
            i++;
            document.removeEventListener("scroll", scrollSpeed);
        }
    }

    document.getElementById('exit-intent-yes').addEventListener('click', function() {
        window.location.href = updateAllLinks();
    });

    document.getElementById('exit-intent-no').addEventListener('click', function() {
        document.getElementById("unique-exit-intent-popup").style.display = 'none';
        document.getElementById("overlay-background").style.display = 'none';
    });

    // Mouse leave detection for exit intent
    document.addEventListener('mouseleave', function(e) {
        if (e.clientY < 0 && secondsCounter >= 30) { // Check time spent before triggering
            triggerExitIntent();
        }
    });

    // Scroll speed detection for exit intent
    var lastPosition = window.scrollY;
    function scrollSpeed() {
        var newPosition = window.scrollY;
        setTimeout(() => {
            var currentSpeed = newPosition - lastPosition;
            if (currentSpeed > 160 && secondsCounter >= 30) { // Check time spent before triggering
                triggerExitIntent();
            }
            lastPosition = newPosition;
        }, 100);
    }

    setTimeout(() => {
        document.addEventListener("scroll", scrollSpeed);
    }, 1000);

    // Time spent on page trigger for exit intent
    setTimeout(triggerExitIntent, 45000); // 45 seconds
});
</script>
<!-- exit intent end -->



</body>



</html>